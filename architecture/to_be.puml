@startuml
!theme amiga
skinparam componentStyle uml1
skinparam backgroundColor DarkSlateGray

skinparam linetype ortho
skinparam classarrowcolor Black
skinparam SequenceMessageAlign reverseDirection
skinparam actorStyle awesome
skinparam defaultTextAlignment center

title [ARCH]: Notification

frame EventSources << <color:Black>Источники событий</color> >> #lightslategray {
    rectangle UGC << <color:Black>Генерация периодических событий</color> >> #lightslategray
    rectangle "Auth/OAuth2.0" << <color:Black>Генерация автоматических событий</color> >>  as Auth #lightslategray
}
component Notification {
    component API << <color:Black>API событий, о которых необходимо\n<color:Black>уведомить пользователя</color> >>
    component ContentManagerPanel << <color:Black>Панель работы с шаблонами\n<color:Black>сообщений и событиями</color> >>
}
database PostgreSQL << <color:Black>БД сервиса нотификации</color> >> {
    collections Notifications << <color:Black>События о которых необходимо\n<color:Black>уведомить пользователя c полями\n<color:Black>notification_id, content_id, last_update,\n<color:Black>last_notification_send</color> >>
    collections LetterTemplates << <color:Black>HTML шаблоны сообщений</color> >>
}
queue RabbitMQ << <color:Black>Очереди событий, хранят только id событий</color> >> {
    queue Urgent
    queue Regular
}
node Sender {
    rectangle Postman << <color:Black>Рассылает на E-mails\n<color:Black>подготовленные уведомления</color> >>
    rectangle LetterConstructor << <color:Black>Собирает письмо из шаблонов\n<color:Black>и полученных данных</color> >>
}
node Worker_1 {
    rectangle EventsGetter_1 << <color:Black>Читает события из очереди</color> >>
    rectangle DataEnricher_1 << <color:Black>Обогащает данными полученное событие</color> >>
}
node Worker_2 {
    rectangle EventsGetter_2 << <color:Black>Читает события из очереди</color> >>
    rectangle DataEnricher_2 << <color:Black>Обогащает данными полученное событие</color> >>
}
actor Users #honeydew
actor Managers #honeydew
component Scheduler << <color:Black>Сканирует БД на наличие новых\n<color:Black>уведомлений, проверяет не были ли\n<color:Black>они отправлены ранее</color> >>
rectangle SearchAPI << <color:Black>Данные о фильмах</color> >> #lightslategray

Auth -[bold]---|> API
UGC -[bold]---|> API
API -[bold]right-|> Notifications
Scheduler <|-[bold]---|> Notifications
Scheduler -[bold]---|> Urgent
Scheduler -[bold]---|> Regular
Urgent -[bold]---|> EventsGetter_1
Regular -[bold]---|> EventsGetter_2
EventsGetter_1 -[bold]-|> DataEnricher_1
EventsGetter_2 -[bold]-|> DataEnricher_2
DataEnricher_1 -[bold]---|> LetterConstructor
DataEnricher_2 -[bold]---|> LetterConstructor
DataEnricher_1 <|-[bold]up----|> Auth
DataEnricher_2 <|-[bold]up----|> Auth
DataEnricher_1 -[bold]---|> SearchAPI
DataEnricher_2 -[bold]---|> SearchAPI
DataEnricher_1 <|-[bold]---|> Notifications
DataEnricher_2 <|-[bold]---|> Notifications
LetterConstructor -[bold]--|> Postman
LetterConstructor <|-[bold]------ LetterTemplates
Postman -[bold]---|> Users
Postman -[bold]---|> Notifications
ContentManagerPanel <|-[bold]---|> LetterTemplates
Managers <|-[bold]up-|> ContentManagerPanel
@endumls
