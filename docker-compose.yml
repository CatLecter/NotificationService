version: "3.8"

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.10.0-management
    hostname: rabbitmq
    restart: always
    env_file:
      - ./rabbitmq/.env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./rabbitmq/conf/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/conf/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  postgres:
    image: postgres:14.2-bullseye
    container_name: postgres
    restart: always
    env_file:
      - ./postgres/.env
    ports:
      - "5430:5432"
    expose:
      - 5432
    volumes:
      - ./postgres/volume:/var/lib/postgresql/data

  notification:
    build: ./notification/
    container_name: notification
    restart: always
    env_file:
      - ./notification/.env
    volumes:
      - ./notification/media/:/usr/src/notification/media
    ports:
      - "8000:8000"
    depends_on:
      - postgres

  nginx:
    image: nginx:1.21.6
    container_name: nginx
    restart: on-failure
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./notification/static/:/static
    ports:
      - "80:80"
    depends_on:
      - notification
      - rabbitmq

  redis:
    image: redis:7.0.0-bullseye
    container_name: redis
    restart: on-failure
    ports:
      - "6379:6379"

  scheduler_1:
    build: ./scheduler/
    container_name: scheduler_1
    restart: always
    env_file:
      - ./scheduler/.env
    environment:
      - EVENT_PRIORITY=REGULAR
      - EVENT_LIMIT=1000
      - BROKER_DB=0
      - EXCHANGE=REGULAR
    volumes:
      - ./scheduler/log/:/usr/src/scheduler/log
    depends_on:
      - postgres
      - redis
    links:
      - redis

  scheduler_2:
    build: ./scheduler/
    container_name: scheduler_2
    restart: always
    env_file:
      - ./scheduler/.env
    environment:
      - EVENT_PRIORITY=URGENT
      - EVENT_LIMIT=1000
      - BROKER_DB=1
      - EXCHANGE=URGENT
    volumes:
      - ./scheduler/log/:/usr/src/scheduler/log
    depends_on:
      - postgres
      - redis
    links:
      - redis

  worker_1:
    build: ./worker/
    container_name: worker_1
    restart: always
    env_file:
      - ./worker/.env
    environment:
      - QUEUE=REGULAR
    volumes:
      - ./worker/log/:/usr/src/worker/log
    depends_on:
      - postgres
      - rabbitmq
    links:
      - rabbitmq

  worker_2:
    build: ./worker/
    container_name: worker_2
    restart: always
    env_file:
      - ./worker/.env
    environment:
      - QUEUE=URGENT
    volumes:
      - ./worker/log/:/usr/src/worker/log
    depends_on:
      - postgres
      - rabbitmq
    links:
      - rabbitmq
